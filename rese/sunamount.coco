# -*- coding: utf-8 -*-
# Copyright Arne Bachmann

# This module provides functions to evaluate a room's or house's sun irradiation for comparison of real estate options.
# This code requires the Coconut transpiler (pip install coconut) and can be tested via coconut-run --strict sunamount.coco --test --mypy


# Standard modules
import calendar  # for number of days in a year computation
import datetime  # for timestamp generation
import math      # trigonometry
import time      # for system locale's daylight savings information

# Dependencies (install via "pip install pysolar pytz" - the latter only used for unit tests)
import pysolar.solar

try: from typing import Any, List, Type
except: pass


# Value type definitionss: instantiation and access per keyword or index
data Location(latitude:float, longitude:float, elevation:float = 0.)  # degrees, degrees, meters
data Room(elevation:float = 0., relevance:float = 1., times:TimeInterval[]? = None)  # meters, factor, time intervals (if None, use default)
data Window(direction:float, room:Room = Room(), stretch:float = 1.)  # degrees, Room, factor
data Obstacle(direction:float, distance:float, width:float, height:float, opacity:float = 1.)  # degrees, meters, meters, meters, 0..1 (0=fully translucent, 1=fully opaque)
data TimeInterval(fromHour:float, toHour:float, weekFactor:float = 7./7.)  # 0..23.99, 0..23.99, 0..1
data Radiation(wattage:float, altitude:float, azimuth:float)  # watts, meters, degrees


# Constants
REF_YEAR:int = 2015  # last year with leap seconds definition of the pysolar module, to avoid a warning
MINUTE_STEPS:int = 5  # time interval for accumulated daily sun wattage (increase for faster computation, decrease for more accurate results)
ENTIRE_DAY = TimeInterval(fromHour = 0., toHour = 23.99, weekFactor = 1.)


# Utility decorator
class memoize(dict):
  def __init__(_, func:() -> Any?) -> None: _.func = func
  def __call__(_, *args) = _[args]
  def __missing__(_, key): result = _[key] = _.func(*key); return result


Timezone:Type = datetime.timezone  # typedef
UTC:Timezone = datetime.timezone.utc  # the default for all test cases
@memoize
def mktz(hours:float = 0.) -> Timezone = Timezone(datetime.timedelta(hours = hours))
CET:Timezone =  mktz(1)
CEST:Timezone = mktz(2)


@memoize
def daysinyear(year:int) -> int = sum([calendar.monthrange(year, month)[1] for month in range(1, 12 + 1)])

def sq(value:float) -> float = value * value  # or value ** 2

def is_dst(dt:datetime.datetime) -> int = time.localtime(calendar.timegm(dt.timetuple())).tm_isdst  # WARN: uses only the system's local timezone. HINT: In Python, bool is an int, but mypy complains

def tz_datetime(tz:Timezone) -> function = (*args, **kwargs) -> datetime.datetime(*args, **kwargs).replace(tzinfo = tz)


def getShadowing(sunAltitude:float, direction:float, obstacle:Obstacle, elevation:float = 0.) -> float:
  ''' Returns sunlight ratio of another building shadowing a window
      returns: 0..1 factor to multiply with incoming sunlight wattage, to reduce its value by the obstacle blocking some light (lower value means less light/more shadowing)

  >>> print(round(getShadowing(2, 90, Obstacle(91, 10, 2, 5)), 4))  # hypo: 11.18m, vangle: 24.10°, hypo: 10.05m, hangle: 11.26°
  0.0074
  >>> print(getShadowing(25, 90, Obstacle(91, 10, 2, 5)))  # hypo: 11.18m, vangle: 26.15°, hypo: 10.31m, hangle: 11.48°, hdiff: 1° < 11.48°, sunAlt: 27° > 26.15°
  1.0
  >>> print(round(getShadowing(24, 90, Obstacle(91, 10, 2, 5)), 4))
  0.0885
  >>> print(round(getShadowing(24, 90, Obstacle(91, 10, 2, 5, opacity = .5)), 4))
  0.5442
  >>> print(getShadowing(2, 90, Obstacle(102, 10, 2, 5)))  # just outside angle
  1.0
  >>> print(round(getShadowing(2, 90, Obstacle(101, 10, 2, 5)), 4))  # just inside angle
  0.0811
  >>> print(round(getShadowing(2, 90, Obstacle(79, 10, 2, 5)), 4))  # same in the other direction
  0.0811
  >>> print(round(getShadowing(2, 90, Obstacle(79, 10, 2, 5), 2.), 4))  # window is two meters higher: more light!
  0.1219
  '''
  translucency:float = 1. - obstacle.opacity
  distanceSquared = obstacle.distance |> sq
  elevation = min(obstacle.height, elevation)  # assure that no negative angle occurs (window higher than obstacle)
  hypothenuse = math.sqrt(distanceSquared + sq(obstacle.height - elevation))
  verticalAngle = ((obstacle.height - elevation) / hypothenuse) |> math.atan |> math.degrees  # angle up upper building edge above ground (arcsin -1..+1 -> -pi/2..+pi/2)
  assert verticalAngle >= 0. and verticalAngle < 90.  # can't be 90 or more, unless infinitely wide
  hypothenuse = math.sqrt(distanceSquared + sq(obstacle.width) / 4.)  # width / 2 for angle to each side
  horizontalAngle = (obstacle.width / hypothenuse) |> math.atan |> math.degrees  # max. obstacle angle
  assert horizontalAngle >= 0. and horizontalAngle < 90.
  horizontal_diff_deg = abs(direction - obstacle.direction)  # angles out of right direction, independent of right or left
  if horizontal_diff_deg >= horizontalAngle or sunAltitude >= verticalAngle: return 1.  # is definitely not shadowed (no obstacle in path of sunlight)
  return translucency + obstacle.opacity * (horizontal_diff_deg / horizontalAngle) * (sunAltitude / verticalAngle)  # product of quotients -> factor 0..1 favouring low values. translucency/opacity divide the interval 0..1. for factor 1 and the computed factor


def getAngleCorrectionRoomFactor(viewingAngle:float, incomingAngle:float, stretch_factor:float = 1.) -> float:
  ''' Return light factor determined by angle difference.
      returns: 0..1 factor that corrects the sunlight wattage

  >>> def output(*args): print(round(getAngleCorrectionRoomFactor(*args), 3))
  >>> output(0., 0.)
  1.0
  >>> output(0., 90.)
  0.0
  >>> output(0., -90.)
  0.0
  >>> output(90., 0.)
  0.0
  >>> output(45., 90.)
  0.707
  >>> output(45., -45.)
  0.0
  >>> output(-45., 45.)
  0.0
  >>> output(45., 0.)
  0.707
  >>> output(45., 0., 1.2)
  0.588
  >>> output(45., 90.)
  0.707
  >>> output(90., 115.)
  0.906
  >>> output(-90., 90.)
  0.0
  >>> output(160., 0.)
  0.0
  '''
  diff_deg:float = abs(viewingAngle - incomingAngle) * stretch_factor  # angles out of right direction
  if diff_deg > 90: return 0.  # ignore this angle, as it is outside the (stretched) relevant observation direction
  factor = diff_deg |> math.radians |> math.cos |> abs  # just a formula to get a reduced value depending on the angle
  assert factor >= 0.
  return factor


def getAngleCorrectedSunWattage(date:datetime.datetime, location:Location, window:Window) -> Radiation:
  ''' Get radiation amount for specific date, location, and viewing direction.
      returns: a Radiation value type

  >>> location = Location(53.4613331, 9.8276266, 20.)
  >>> def output(irr): print((round(irr.wattage, 3), round(irr.altitude, 3), round(irr.azimuth, 3)))
  >>> output(getAngleCorrectedSunWattage(tz_datetime(CET)(REF_YEAR, 1, 1,  0), location, Window(0.)))  # facing south
  (0.0, 0.0, 0.0)
  >>> output(getAngleCorrectedSunWattage(tz_datetime(CEST)(REF_YEAR, 6, 1,  0), location, Window(0.)))  # midnight
  (0.0, 0.0, 0.0)
  >>> output(getAngleCorrectedSunWattage(tz_datetime(CET)(REF_YEAR, 1, 1, 12), location, Window(0.)))  # noon january
  (674.304, 13.421, 5.699)
  >>> output(getAngleCorrectedSunWattage(tz_datetime(CEST)(REF_YEAR, 6, 1, 12), location, Window(0.)))  # noon june
  (718.889, 55.223, 33.055)
  >>> output(getAngleCorrectedSunWattage(tz_datetime(CEST)(REF_YEAR, 6, 1, 9), location, Window(-90.)))  # noon june other angle
  (0.0, 0.0, 0.0)
  '''
  altitude:float = pysolar.solar.get_altitude(location.latitude, location.longitude, date, location.elevation + window.room.elevation)  # in degrees and meters
  azimuth:float = pysolar.solar.get_azimuth(location.latitude, location.longitude, date, location.elevation + window.room.elevation)
  if azimuth < -180.:  azimuth += 360.  # normalization
  elif azimuth > 180.: azimuth -= 360.  # to -180..180
  if altitude < 0. or altitude >  180.: return Radiation(0., 0., 0.)  # behind the horizon, don't return radiation
  factor = getAngleCorrectionRoomFactor(window.direction, azimuth, window.stretch)
  return Radiation(factor * pysolar.solar.radiation.get_radiation_direct(date, altitude), altitude, azimuth) if factor > 0. else Radiation(0., 0., 0.)  # compute radiation in Watts / square meter


def getTimeNormalizedSunWattage(date:datetime.datetime, location:Location, window:Window, timeInterval:TimeInterval = ENTIRE_DAY, obstacles:Obstacle[] = [], minute_interval:int = MINUTE_STEPS) -> float =
  ''' Computes radiation by the minute, then normalize by time interval for an hourly value.
      returns: hourly average radiation (for observed time interval)

  >>> location = Location(53.4613331, 9.8276266, 20.)
  >>> print(round(getTimeNormalizedSunWattage(tz_datetime(CEST)(2015, 6, 1), location, Window(0.)), 3))  # average over entire day this is very little
  188.804
  >>> print(round(getTimeNormalizedSunWattage(tz_datetime(CEST)(2015, 6, 1), location, Window(0., stretch = 2.)), 3))  # smaller window compared to wall length
  81.772
  >>> print(round(getTimeNormalizedSunWattage(tz_datetime(CET)(2015, 3, 1), location, Window(0.)), 3))
  228.892
  >>> print(round(getTimeNormalizedSunWattage(tz_datetime(CET)(2015, 3, 1), location, Window(5.), TimeInterval(9., 18.)), 3))  # average over entire day this is very little
  573.894
  '''
  amount = 0.
  minutes_from:int = int((timeInterval.fromHour % 1.) * 60)
  minutes_to:int = int((timeInterval.toHour % 1.) * 60)
  if minutes_to == 0: minutes_to = -1  # to avoid computation on last hour (e.g. 4..5 means not compute first minute of 5)
  for hour in range(int(timeInterval.fromHour), int(timeInterval.toHour) + 1):
    for minute in range(minutes_from if hour == int(timeInterval.fromHour) else 0, minutes_to + 1 if hour == int(timeInterval.toHour) else 60, minute_interval):
      time = tz_datetime(date.tzinfo)(date.year, date.month, date.day, hour, minute)  # create timestamp to compute radiation for
      radiation = getAngleCorrectedSunWattage(time, location, window)
      shadowFactor = 1.  # start with "no shadowing"
      for obstacle in obstacles:  # using the angle corrected wattage, we only need to consider sun altitude in the following step
        shadowFactor = min(shadowFactor, getShadowing(radiation.altitude, window.direction, obstacle, window.room.elevation))  # min for the obstacle blocking the most
      assert radiation.altitude >= 0.   and radiation.altitude <= 180.
      assert radiation.azimuth >= -180. and radiation.azimuth  <= 180.
      amount += radiation.wattage * shadowFactor
  norm:float = (60. / MINUTE_STEPS) * (timeInterval.toHour - timeInterval.fromHour)
  assert norm >= 0.
  amount / norm if norm != 0. else 0.


def getDailySunWattageSumForEntireYear(location:Location, window:Window, timeInterval:TimeInterval, obstacles:Obstacle[] = [], year:int = REF_YEAR, timezone:Timezone = UTC, time_dst:Timezone? = None) -> float =
  ''' Return sum of daily average radiation amount.
      returns: computed aggregate wattage

  >>> location = Location(53.4613331, 9.8276266, 20.)
  >>> print(round(getTimeNormalizedSunWattage(tz_datetime(CET)(REF_YEAR, 3, 1), location, Window(0.), TimeInterval(fromHour = 9., toHour = 18.)), 3))
  581.087
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0.), TimeInterval(9., 18.), timezone = CET, time_dst = CEST), 3))
  183646.713
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0.), TimeInterval(8., 19.), timezone = CET, time_dst = CEST), 3))  # is less due to longer interval at dark times
  153370.104
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0.), TimeInterval(11., 15.), timezone = CET, time_dst = CEST), 3))  # is more due to focus on good times
  266687.268

  Try another timezone (but for same location - doesn't really make much sense, but exemplifies the "localize" logic)
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0.), TimeInterval(1., 5.), timezone = pytz.timezone("Australia/Queensland")), 3))  # no dst in this timezone
  14860.366

  Now try something with an obstacle:
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0., room = Room(elevation = 0.)), TimeInterval(11., 15.), [Obstacle(5, 30, 6, 7, .9)], timezone = pytz.timezone("Europe/Berlin")), 3))  # no dst in this timezone
  257854.546

  And again, with a floor height of 5 meters, which should result in more sunlight
  >>> print(round(getDailySunWattageSumForEntireYear(location, Window(0., room = Room(elevation = 5.)), TimeInterval(11., 15.), [Obstacle(5, 30, 6, 7, .9)], timezone = pytz.timezone("Europe/Berlin")), 3))  # no dst in this timezone
  266687.268
  '''
  amount = 0.
  for days in range(0, daysinyear <| year):
    raw_date = datetime.datetime(year, 1, 1) + datetime.timedelta(days = days)
    if time_dst is None:  # using named timezone from pytz or non-dst fixed timezone
      date = timezone.localize(raw_date)
    else:
      date = tz_datetime(time_dst if is_dst(raw_date) else timezone)(year, raw_date.month, raw_date.day)  # compute day of year WARN: is_dst uses system's locale
    amount += timeInterval.weekFactor * getTimeNormalizedSunWattage(date, location, window, timeInterval, obstacles)
  amount


def getHouseScore(location:Location, windows:Window[], obstacles:Obstacle[], timeIntervals:TimeInterval[] = [], timezone:Timezone = UTC, time_dst:Timezone? = None) -> float =
  ''' Second experiment. Simply show sum of annual amount of daily-hour-normalized sun wattage to compare different house options.
      returns: a score >= 0

  Define the reference location, windows, times and obstacles:
  >>> location = Location(53.4613331, 9.8276266, 20.)
  >>> rooms = {"living": Room(0., 1.), "kitchen": Room(0, .5), "office": Room(0., .5)}
  >>> windows = [Window(-135., rooms["living"], 2.), Window(45., rooms["kitchen"], 2.), Window(-45., rooms["office"], .3)]
  >>> times = [TimeInterval(7., 9., 7./7.), TimeInterval(16., 22.5, 7/7.), TimeInterval(9., 16., 2./7)]
  >>> obstacles = [Obstacle(50, 20, 10, 10, .9), Obstacle(-5, 30, 5, 4, .9), Obstacle(-45, 10, 10, 10, .9), Obstacle(-135, 15, 10, 10, .8)]

  Use a daylight saving-aware timezone:
  >>> print(round(getHouseScore(location, windows, obstacles, times, timezone = pytz.timezone("Europe/Berlin")), 4))
  52799.2992

  Use explicit CET/CEST timezones. TODO This test passes only on a CET/CEST machine, because it derives DST'S start/end dates from the current system locale
  >>> print(round(getHouseScore(location, windows, obstacles, times, timezone = CET, time_dst = CEST), 4))
  52799.2992

  Start a new example:
  >>> print(round(getHouseScore(location, windows[1:2], obstacles[1:2], times, timezone = CET, time_dst = CEST), 4))
  29222.2158

  Update window's room's floor height:
  >>> windows[1] = windows[1]._replace(room = windows[1].room._replace(elevation = 4.))  # raise window's room floor to achieve more light inside
  >>> print(round(getHouseScore(location, windows[1:2], obstacles[1:2], times[:1], timezone = CET, time_dst = CEST), 4))
  14056.5206

  Now check room time interval vs. default time intervals:
  >>> time = [TimeInterval(10, 15)]  # around noon instead
  >>> windows[1] = windows[1]._replace(room = windows[1].room._replace(times = time))  # update time interval
  >>> print(round(getHouseScore(location, windows[1:2], obstacles[1:2], times[:1], timezone = CET, time_dst = CEST), 4))
  58162.953
  '''
  amount = 0.
  for window in windows:
    assert window.room is None or len(window.room) > 0
    for timeInterval in window.room.times ?? timeIntervals:  # use default if nothing defined on room
      amount += window.room.relevance * getDailySunWattageSumForEntireYear(location, window, timeInterval, obstacles, timezone = timezone, time_dst = time_dst)
  amount


if __name__ == '__main__':
  import sys
  if '--test' in sys.argv: import doctest, pytz; doctest.testmod()
